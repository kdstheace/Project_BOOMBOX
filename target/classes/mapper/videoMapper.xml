<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boom.box.dao.VideoMapper">
<!-- 1. 비디오 업로드 용 -->
<insert id="insertVideo" parameterType="video">
	<selectKey keyProperty="video_id" resultType="int" order="BEFORE">
		select
			video_seq.nextval
		from
			dual
	</selectKey>
	insert into video_tb(
		video_id
		,video_user_id
		,video_title
		,video_content
		,video_urlS
		,video_urlO
		,video_class
		,video_public
		,video_ageLimit
		,video_thumbnailS
		,video_thumbnailO
		,video_copyright
		,video_motion
	)values(
	    #{video_id}
	    ,#{video_user_id}
	    ,#{video_title}
	    ,#{video_content}
	    ,#{video_urlS}
	    ,#{video_urlO}
	    ,#{video_class}
	    ,#{video_public}
	    ,#{video_ageLimit}
	    ,#{video_thumbnailS}
	    ,#{video_thumbnailO}
	    ,#{video_copyright}
	    ,#{video_motion}
	)
</insert>

<insert id="insertVideoInterest" parameterType="video">
	insert into
		videoInterest_tb(
			videoInterest_id
			,videoInterest_video_id
			,videoInterest_interest
			,videointerest_category
		)
		select
			videoInterest_seq.nextval
			, A.* from (
		<foreach collection="videoInterest_interest" item="arr" separator="UNION ALL ">
			select
				#{video_id} as videoInterest_video_id
				,#{arr} as videoInterest_interest
				<if test="arr == 'HOME TRAINING'">
					,'HOME TRAINING' as videointerest_category
				</if>
				<if test="arr == 'KIDS' || arr == 'CHEERLEADING' || arr == 'OTHER(TEENS)'">
					,'TEENS' as videointerest_category
				</if>
				<if test="arr == 'K-POP' || arr == 'J-POP' || arr == 'OTHERS(CHOREO)'">
					,'POP-CHOREOGRAPHY' as videointerest_category
				</if>
				<if test="arr == 'MALE CLUBDANCE' || arr == 'FEMALE CLUBDANCE' || arr == 'OTHERS(CLUB)'">
					,'CLUB' as videointerest_category
				</if>
				<if test="arr == 'POPPIN DANCE' || arr == 'BREAK DANCE' || arr == 'LOCKING' || arr == 'OTHERS(HIPHOP)'">
					,'HIPHOP' as videointerest_category
				</if>
				<if test="arr == 'TANGO' || arr == 'TAP DANCE' || arr == 'BELLY DANCE' || arr == 'JIVE' || arr == 'JAZZ' || arr == 'OTHERS'">
					,'OTHERS' as videointerest_category
				</if>
				
			from
				dual
		</foreach>
		) A
</insert>

<!-- 2. 비디오 리스트 가져오기 및 검색 -->
<select id="selectVideoList" resultType="hashmap" parameterType="String">
	select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO
	from
	    video_tb v, user_tb u, stage_tb s
	where
		v.video_user_id = u.user_id
		and
		s.stage_user_id = u.user_id
		<if test="_parameter != null">
	and
		v.video_title like '%' || #{searchText} || '%'
		</if>
	order by
	    v.video_indate desc
</select>
<!-- 2-1 UserID로 비디오 리스트 가져오기 -->
<select id="selectVideoListById" parameterType="int" resultType="hashmap">
	select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO
	from
	    video_tb v, user_tb u, stage_tb s
	where
		v.video_user_id = u.user_id
		and
		s.stage_user_id = u.user_id
		and
		u.user_id = #{user_id}
	order by
	    v.video_indate desc
</select>

<!-- 2-1 Like 비디오 리스트 가져오기-->
<select id="selectVideoListByLike" resultType="hashmap" parameterType="int">
	select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO
	from
	    video_tb v, user_tb u, stage_tb s, like_tb l
	where
		v.video_user_id = u.user_id
        and
        s.stage_user_id = u.user_id
        and
        l.like_video_id = v.video_id
        and
        l.like_user_id = #{user_id}
</select>

<select id="selectVideoByFollow" resultType="hashmap" parameterType="int">
	select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO
	from
	    video_tb v, user_tb u, stage_tb s
	where
		v.video_user_id = u.user_id
        and
        s.stage_user_id = u.user_id
        and
        v.video_user_id in (
            select
                follow_stage_id
            from
                follow_tb
            where
                follow_user_id = #{follow_user_id})   

</select>

<select id="selectVideoByInterest" resultType="hashmap" parameterType="int">
   select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
        ,vi.videointerest_interest as videointerest_interest
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO  
	from
	    video_tb v, user_tb u, stage_tb s, videointerest_tb vi
	where
		v.video_user_id = u.user_id
        and
        s.stage_user_id = u.user_id
        and
        v.video_id = vi.videointerest_video_id
        and
        vi.videointerest_interest 
            in (
                select
                    ui.userinterest_interest
                from 
                    user_tb u, userinterest_tb ui
                where
                    u.user_id = ui.userinterest_user_id
                    and
                    u.user_id = #{user_id}
                )

</select>



<!-- 3. 비디오 하나 가져오기 및 검색 -->
<select id="selectVideoOne" parameterType="int" resultType="hashmap">
	select
	    v.video_id as video_id
		,v.video_user_id as video_user_id
		,v.video_title as video_title
		,v.video_content as video_content
		,v.video_hit as video_hit
		,v.video_urlS as video_urlS 
		,v.video_urlO as video_urlO
		,to_char(video_inDate, 'yyyy-MM-dd') as video_inDate
		,v.video_class as video_class
		,v.video_public as video_public
		,v.video_ageLimit as video_ageLimit
		,v.video_thumbnailS as video_thumbnailS 
		,v.video_thumbnailO as video_thumbnailO
		,v.video_copyright as video_copyright
		,v.video_motion as video_motion
		,v.video_likeNum as video_likeNum
		,u.user_name as user_name
		,u.user_googleimg as user_googleimg
		,s.stage_profileImgS as stage_profileImgS
		,s.stage_profileImgO as stage_profileImgO
	from
	    video_tb v, user_tb u, stage_tb s
	where
		v.video_user_id = u.user_id
       and
        s.stage_user_id = u.user_id
       and
        v.video_id = #{video_id}
</select>

<select id="selectVideoById" parameterType="int" resultType="video">
	select
	    video_urlS
	    , video_urlO
	    , video_thumbnailS
	    , video_thumbnailO
	    , video_user_id
	from
	    video_tb
	where
	    video_id = #{video_id}
</select>

<select id="selectVideoCount" parameterType="String" resultType="int">
	select
		count(*)
	from
		video_tb
	<if test = "_parameter != null">
	where
		video_title like '%' || ${searchText} || '%'
	</if>
</select>

<delete id="deleteVideo" parameterType="int">
DELETE
FROM
	VIDEO_TB
WHERE
	VIDEO_ID = #{video_id}
</delete>

<update id="updateVideoHits" parameterType="int">
update 
    video_tb 
set 
    video_hit = video_hit + 1
where
    video_id = #{video_id} 
</update>

<insert id="insertLike" parameterType="video">
	insert into like_tb(
	    like_id
	    ,like_user_id
	    ,like_video_id
	)values(
	    like_seq.nextval
	    ,#{video_user_id}
	    ,#{video_id}
	)
</insert>

<insert id="deleteLike" parameterType="hashmap">
	delete from 
		like_tb 
	where
		like_user_id = #{like_user_id}
	and
		like_video_id = #{like_video_id}
</insert>

<select id="countLike" parameterType="int" resultType="int">
	select 
	    count(*)
	from 
	    like_tb
	where
	    like_video_id = #{like_video_id}
</select>

<select id="isLike" parameterType="hashmap" resultType="Integer">
	select
	    like_id
	from
	    like_tb
	where
	    like_user_id = #{like_user_id}
	and
		like_video_id = #{like_video_id}   
</select>

<!-- Comments -->
<insert id="insertComment" parameterType="comment">
insert into comment_tb(
    comment_id
    ,comment_user_id
    ,comment_video_id
    ,comment_content
)values(
    COMMENT_SEQ.nextval
    ,#{comment_user_id}
    ,#{comment_video_id}
    ,#{comment_content}
)
</insert>

<select id="selectComment" parameterType="int" resultType="hashmap">
select
    c.comment_id as comment_id
    ,c.comment_user_id as comment_user_id
    ,c.comment_video_id as comment_video_id
    ,c.comment_content as comment_content
	,c.comment_indate as comment_indate
    ,u.user_name as user_name
    ,s.stage_profileimgo as stage_profileimgo
    ,s.stage_profileimgs as stage_profileimgs
    ,u.user_googleimg as user_googleimg
from
    comment_tb c, user_tb u, stage_tb s
where
    comment_video_id = #{comment_video_id}
    and
    c.comment_user_id = u.user_id
    and
    c.comment_user_id = s.stage_user_id
order by
	comment_indate desc
</select>

<update id="updateComment" parameterType="comment">
update 
    comment_tb 
set 
    comment_content = #{comment_content}
    ,comment_indate = sysdate
where
    comment_user_id = #{comment_user_id}
</update>

</mapper>
